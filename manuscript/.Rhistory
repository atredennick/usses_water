trt_data$Treatment <- "Control"
trt_data[which(trt_data$year==2015),"ppt1"] <- trt_data[which(trt_data$year==2015),"ppt1"]+10
trt_data[which(trt_data$year==2012),"ppt1"] <- trt_data[which(trt_data$year==2012),"ppt1"]-5
ppt_histogram <- ggplot(weather, aes(x=ppt1))+
geom_histogram(bins=20,color="lightblue",fill="lightblue", aes(y=..density..), alpha = 0.5, size=0.00001)+
geom_line(stat="density", color="blue")+
geom_segment(data=trt_data, aes(x=ppt1,xend=ppt1,y=0.00045,yend=0), arrow = arrow(length = unit(0.02, "npc")))+
geom_text(data=trt_data, aes(x=ppt1, y=0.0009, label=year), angle=90, size=2.5)+
scale_x_continuous(expand=c(0,0), limits=c(0,620), breaks=seq(0,600,100))+
scale_y_continuous(expand=c(0,0), limits=c(0,0.0085))+
ylab("Density")+
xlab("Growing Season Precipitation (mm)")+
theme_bw()+
theme(panel.grid.minor = element_blank())
####
####  PLOT SOIL WATER BY TREATMENT ----
####
soil_moisture <- read.csv("../data/soil_moisture_data/average_seasonal_soil_moisture.csv") %>%
select(-year) %>%
separate(simple_date, c("year","month","day")) %>%
# group_by(year,month,Treatment,type,year) %>%
# summarise(avg_vwc = mean(VWC,na.rm=TRUE)) %>%
filter(type=="observed") %>%
#mutate(month_year = as.factor(paste0(year,"-",month))) %>%
ungroup()
soil_vwc <- ggplot(soil_moisture, aes(x=julian_date, y=VWC, group=Treatment, color=Treatment))+
geom_line(size=0.5)+
#geom_xspline(spline_shape=-0.5)+
scale_color_brewer(palette = "Set2", name="Treatment")+
ylab(expression(paste("Mean Soil VWC (ml ", ml^-1,")")))+
xlab("Julian Day")+
scale_y_continuous(breaks=seq(0,24,8))+
facet_grid(year~.)+
theme_bw()+
theme(panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=6))+
guides(color=FALSE)
####
####  ANPP PLOT ----
####
permanent_quad_biomass <- readRDS("../data/estimated_biomass/permanent_plots_estimated_biomass.RDS")
permanent_quad_biomass <- permanent_quad_biomass %>% filter(Treatment %in% c("Control","Drought","Irrigation"))
biomass_year_treatment <- permanent_quad_biomass %>%
group_by(Treatment,year) %>%
summarise(mean_biomass = mean(biomass_grams_est))
biomass_yr_trt_summ <- permanent_quad_biomass %>%
filter(!str_detect(quadname, 'P1|P7')) %>%
group_by(Treatment,year) %>%
summarise(mean_biomass = mean(biomass_grams_est),
sd_biomass = sd(biomass_grams_est)) %>%
filter(year > 2011)
anpp_means <- ggplot(biomass_yr_trt_summ, aes(x=year, y=mean_biomass, color=Treatment))+
geom_line()+
geom_errorbar(aes(ymin=mean_biomass-sd_biomass, ymax=mean_biomass+sd_biomass), width=0.05)+
geom_point(color="white", size=3)+
geom_point()+
geom_point(color="grey35", shape=1)+
scale_color_brewer(palette = "Set2", name="Treatment")+
scale_x_continuous(breaks=c(2011:2016))+
scale_y_continuous(breaks=seq(50,350,50))+
ylab(expression(paste("ANPP (g ", m^-2,")")))+
xlab("Year")+
theme_bw()+
theme(panel.grid.minor = element_blank())+
guides(color = guide_legend(override.aes = list(size=1)))+
theme(legend.position = c(0.2, 0.75),legend.key.size = unit(1,"pt"),legend.title = element_text(size=10),
legend.text = element_text(size = 8),
legend.key.height = unit(0.8,"line"),
legend.box.background = element_rect())
####
####  COMBINE PLOTS AND SAVE ----
####
# gout <- grid.arrange(ppt_histogram,soil_vwc,anpp_means,ncol=1,nrow=3)
gout <- cowplot::plot_grid(ppt_histogram,soil_vwc,anpp_means,ncol=1, labels = c("A)","B)","C)"))
ggsave("../figures/data_panels.png", gout, width=3.2, height=8, units="in", dpi=120)
# gout <- grid.arrange(ppt_histogram,soil_vwc,anpp_means,ncol=1,nrow=3)
gout <- cowplot::plot_grid(ppt_histogram,soil_vwc,anpp_means,
ncol=1, labels = c("A)","B)","C)"), hjust = -0.4)
gout
ggsave("../figures/data_panels.png", gout, width=3.2, height=8, units="in", dpi=120)
ggsave("../figures/data_panels.png", gout, width=3.3, height=8, units="in", dpi=120)
##  Script to plot results from the GLMM Stan object.
##
##  Author: Andrew Tredennick
##  Date created: May 25, 2017
##  Clear everything
rm(list=ls(all.names = TRUE))
##  Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
library(tidyverse)    # Data munging
library(dplyr)        # Data summarizing
library(ggthemes)     # Pleasing ggplot themes
library(ggjoy)        # Joy plots!
library(stringr)      # Working with strings
library(rstan)        # For MCMC and Stan objects
library(gridExtra)    # For combining ggplot objects
library(viridis)      # Pleasing color palette
library(RColorBrewer) # More color palettes
library(cowplot)      # For combining ggplots
####
####  LOAD DATA AND MODEL RESULTS ----
####
source("read_format_data.R") # load data
all_fit <- readRDS("../results/randcoefs_alltreatments_fit.RDS")
####
####  FUNCTION TO CALCULATE MAX(Pr(effect) > 0, Pr(effect) < 0) ----
####
get_one_tailed <- function(values){
above <- 1 - ecdf(values)(0)
below <- ecdf(values)(0)
max(above,below)
}
####
####  PLOT TREATMENT-LEVEL POSTERIOR DISTRIBUTIONS ----
####
param_labels <- c("Control::Intercept",
"Drought::Intercept",
"Irrigation::Intercept",
"Control::Slope",
"Drought::Slope",
"Irrigation::Slope")
betas <- data.frame(extract(all_fit, pars = 'beta')) %>%
mutate(iteration = row_number()) %>%
gather(param_name, estimate, starts_with('beta')) %>%
mutate(param_name = factor(param_name, labels = param_labels)) %>%
separate(param_name, c("Treatment", "Type"), "::")
treat_slopes <- betas %>%
filter(Treatment != "Control")
slope_probs <- treat_slopes %>%
group_by(Treatment, Type) %>%
summarise(probs = round(get_one_tailed(estimate),2)) %>%
mutate(prob_text = paste("Pr < 0 =", probs))
slope_probs$xpos <- c(1.16, 1, 1, 1)
slope_probs$ypos <- c(1.5,1.2,2.8,2.2)
treat_cols <- brewer.pal(3,"Set2")[2:3]
treat_posteriors <- ggplot(treat_slopes)+
geom_vline(aes(xintercept=0), linetype=2, color="grey45")+
geom_joy(stat="density", adjust=3, alpha=0.8, aes(x=estimate, y=Treatment, fill=Treatment, color=Treatment, height = ..density..))+
geom_text(data = slope_probs, aes(x=xpos, y=ypos, label = prob_text), size = 3)+
facet_wrap(~Type)+
scale_y_discrete(labels = c("Drought","Irrigation"))+
scale_fill_manual(values = treat_cols)+
scale_color_manual(values = treat_cols)+
guides(fill=FALSE, color=FALSE)+
xlab("Coefficient Value")+
ylab(NULL)+
theme_bw()+
theme(panel.grid.minor = element_blank(),
panel.border     = element_blank(),
axis.line        = element_blank(),
axis.ticks       = element_blank(),
strip.background = element_blank(),
strip.text       = element_text(face="bold"),
panel.spacing    = unit(1, units = "cm"))
####
####  PLOT MEAN REGRESSION LINES FOR EACH TREATMENT ----
####
treat_effects <- data.frame(extract(all_fit, pars = 'beta')) %>%
mutate(iteration = row_number()) %>%
gather(param_name, estimate, starts_with('beta')) %>%
mutate(param_name = factor(param_name, labels = param_labels)) %>%
spread(param_name, estimate) %>%
mutate(`Drought::Intercept` = `Drought::Intercept` + `Control::Intercept`,
`Irrigation::Intercept` = `Irrigation::Intercept` + `Control::Intercept`,
`Drought::Slope` = `Drought::Slope` + `Control::Slope`,
`Irrigation::Slope` = `Irrigation::Slope` + `Control::Slope`) %>%
gather(param_name, estimate, -iteration)
effect_summary <- treat_effects %>%
group_by(param_name) %>%
summarise(mean_estimate = round(mean(estimate), 2),
median_estimate = round(median(estimate), 2),
lower_95_ci = round(quantile(estimate, probs = c(0.025)), 2),
upper_95_ci = round(quantile(estimate, probs = c(0.975)), 2)) %>%
separate(param_name, into = c("Treatment", "Coefficient"), sep = "::") %>%
arrange(Coefficient, Treatment) %>%
select(Coefficient, everything())
saveRDS(effect_summary, "../results/effect_summary.RDS")
mean_effects <- treat_effects %>%
group_by(param_name) %>%
summarise(mean_estimate = mean(estimate))
regression <- mean_effects %>%
separate(param_name, into = c("Treatment","Coefficient"), sep = "::") %>%
spread(Coefficient, mean_estimate)
lmod <- lm(log(anpp) ~ vwc_scaled, anpp_data)
x    <- model.matrix(lmod)
newx <- data.frame(x = seq(min(x[,2]), max(x[,2]), length.out = 50)) %>%
mutate(id = paste("x",1:50,sep = "::")) %>%
spread(id, x)
newx <- rbind(rbind(newx,newx),newx)
newx$Treatment <- regression$Treatment
regression <- regression %>%
left_join(newx, by="Treatment") %>%
gather(xid, newx, -Treatment, -Intercept, -Slope)
regression$estimate <- with(regression, Intercept+Slope*newx)
mean_log_anpp <- mean(log(anpp_data$anpp))
sd_log_anpp <- sd(log(anpp_data$anpp))
mean_vwc <- mean(anpp_data$total_seasonal_vwc)
sd_vwc <- sd(anpp_data$total_seasonal_vwc)
regression <- regression %>%
mutate(backtrans_estimate = estimate*sd_log_anpp+mean_log_anpp,
backtrans_vwc = newx*sd_vwc+mean_vwc)
ggplot(anpp_data, aes(x=total_seasonal_vwc,y=log(anpp)))+
geom_point(shape=21,color="grey25",alpha=0.8,aes(fill=Treatment))+
geom_line(data=regression, aes(x=backtrans_vwc, y=backtrans_estimate, color=Treatment), size=1)+
scale_fill_brewer(palette = "Set2")+
scale_color_brewer(palette = "Set2")+
xlab("March-June Cumulative VWC")+
ylab(expression(paste("log[ANPP (g ",m^2,")]")))+
theme_bw()+
theme(panel.grid.minor = element_blank())#+
#ggtitle("B)")
head(regression)
dotrt="Control"
tmpdat <- filter(regression, Treatment == dotrt)
tmprange <- range(tmpdat$newx)
tmprange
tmprange <- range(tmpdat$backtrans_vwc)
tmprange
tmpdat <- filter(regression, Treatment == dotrt)
tmprange <- range(tmpdat$backtrans_vwc)
tmpdat$backtrans_vwc[tmpdat$backtrans_vwc < tmprange[1] | tmpdat$backtrans_vwc > tmprange[2]] <- NA
tmpdat$backtrans_vwc
head(tmpdat)
head(anpp_data)
range(anpp_data[which(anpp_data$Treatment==dotrt),"total_seasonal_vwc"])
tmpdat <- filter(regression, Treatment == dotrt)
tmprange <- range(anpp_data[which(anpp_data$Treatment==dotrt),"total_seasonal_vwc"])
tmpdat$backtrans_vwc[tmpdat$backtrans_vwc < tmprange[1] | tmpdat$backtrans_vwc > tmprange[2]] <- NA
tmpdat$backtrans_vwc
range(anpp_data[which(anpp_data$Treatment==dotrt),"total_seasonal_vwc"])
tmpdat <- filter(regression, Treatment == dotrt)
tmpdat$backtrans_vwc
colnames(tmpdat)
tmpdat <- filter(regression, Treatment == dotrt)
tmprange <- range(anpp_data[which(anpp_data$Treatment==dotrt),"total_seasonal_vwc"])
tmpdat$backtrans_vwc[tmpdat$backtrans_vwc < tmprange[1] | tmpdat$backtrans_vwc > tmprange[2]] <- NA
colnames(tmpdat)[8] <- vwc_limited
regression <- left_join(regression, tmpdat)
regression <- mean_effects %>%
separate(param_name, into = c("Treatment","Coefficient"), sep = "::") %>%
spread(Coefficient, mean_estimate)
lmod <- lm(log(anpp) ~ vwc_scaled, anpp_data)
x    <- model.matrix(lmod)
newx <- data.frame(x = seq(min(x[,2]), max(x[,2]), length.out = 50)) %>%
mutate(id = paste("x",1:50,sep = "::")) %>%
spread(id, x)
newx <- rbind(rbind(newx,newx),newx)
newx$Treatment <- regression$Treatment
regression <- regression %>%
left_join(newx, by="Treatment") %>%
gather(xid, newx, -Treatment, -Intercept, -Slope)
regression$estimate <- with(regression, Intercept+Slope*newx)
mean_log_anpp <- mean(log(anpp_data$anpp))
sd_log_anpp <- sd(log(anpp_data$anpp))
mean_vwc <- mean(anpp_data$total_seasonal_vwc)
sd_vwc <- sd(anpp_data$total_seasonal_vwc)
regression <- regression %>%
mutate(backtrans_estimate = estimate*sd_log_anpp+mean_log_anpp,
backtrans_vwc = newx*sd_vwc+mean_vwc)
tmpdat <- filter(regression, Treatment == dotrt)
tmprange <- range(anpp_data[which(anpp_data$Treatment==dotrt),"total_seasonal_vwc"])
tmpdat$backtrans_vwc[tmpdat$backtrans_vwc < tmprange[1] | tmpdat$backtrans_vwc > tmprange[2]] <- NA
colnames(tmpdat)[8] <- "vwc_limited"
regression <- left_join(regression, tmpdat)
head(regression)
regression <- mean_effects %>%
separate(param_name, into = c("Treatment","Coefficient"), sep = "::") %>%
spread(Coefficient, mean_estimate)
lmod <- lm(log(anpp) ~ vwc_scaled, anpp_data)
x    <- model.matrix(lmod)
newx <- data.frame(x = seq(min(x[,2]), max(x[,2]), length.out = 50)) %>%
mutate(id = paste("x",1:50,sep = "::")) %>%
spread(id, x)
newx <- rbind(rbind(newx,newx),newx)
newx$Treatment <- regression$Treatment
regression <- regression %>%
left_join(newx, by="Treatment") %>%
gather(xid, newx, -Treatment, -Intercept, -Slope)
regression$estimate <- with(regression, Intercept+Slope*newx)
mean_log_anpp <- mean(log(anpp_data$anpp))
sd_log_anpp <- sd(log(anpp_data$anpp))
mean_vwc <- mean(anpp_data$total_seasonal_vwc)
sd_vwc <- sd(anpp_data$total_seasonal_vwc)
regression <- regression %>%
mutate(backtrans_estimate = estimate*sd_log_anpp+mean_log_anpp,
backtrans_vwc = newx*sd_vwc+mean_vwc)
regression <- mean_effects %>%
separate(param_name, into = c("Treatment","Coefficient"), sep = "::") %>%
spread(Coefficient, mean_estimate)
lmod <- lm(log(anpp) ~ vwc_scaled, anpp_data)
x    <- model.matrix(lmod)
newx <- data.frame(x = seq(min(x[,2]), max(x[,2]), length.out = 50)) %>%
mutate(id = paste("x",1:50,sep = "::")) %>%
spread(id, x)
newx <- rbind(rbind(newx,newx),newx)
newx$Treatment <- regression$Treatment
regression <- regression %>%
left_join(newx, by="Treatment") %>%
gather(xid, newx, -Treatment, -Intercept, -Slope)
regression$estimate <- with(regression, Intercept+Slope*newx)
mean_log_anpp <- mean(log(anpp_data$anpp))
sd_log_anpp <- sd(log(anpp_data$anpp))
mean_vwc <- mean(anpp_data$total_seasonal_vwc)
sd_vwc <- sd(anpp_data$total_seasonal_vwc)
regression <- regression %>%
mutate(backtrans_estimate = estimate*sd_log_anpp+mean_log_anpp,
backtrans_vwc = newx*sd_vwc+mean_vwc)
for(dotrt in unique(regression$Treatment)){
tmpdat <- filter(regression, Treatment == dotrt)
tmprange <- range(anpp_data[which(anpp_data$Treatment==dotrt),"total_seasonal_vwc"])
tmpdat$backtrans_vwc[tmpdat$backtrans_vwc < tmprange[1] | tmpdat$backtrans_vwc > tmprange[2]] <- NA
colnames(tmpdat)[8] <- "vwc_limited"
regression <- left_join(regression, tmpdat)
}
dotrt
unique(regression$Treatment)
head(regression)
regression <- mean_effects %>%
separate(param_name, into = c("Treatment","Coefficient"), sep = "::") %>%
spread(Coefficient, mean_estimate)
lmod <- lm(log(anpp) ~ vwc_scaled, anpp_data)
x    <- model.matrix(lmod)
newx <- data.frame(x = seq(min(x[,2]), max(x[,2]), length.out = 50)) %>%
mutate(id = paste("x",1:50,sep = "::")) %>%
spread(id, x)
newx <- rbind(rbind(newx,newx),newx)
newx$Treatment <- regression$Treatment
regression <- regression %>%
left_join(newx, by="Treatment") %>%
gather(xid, newx, -Treatment, -Intercept, -Slope)
regression$estimate <- with(regression, Intercept+Slope*newx)
mean_log_anpp <- mean(log(anpp_data$anpp))
sd_log_anpp <- sd(log(anpp_data$anpp))
mean_vwc <- mean(anpp_data$total_seasonal_vwc)
sd_vwc <- sd(anpp_data$total_seasonal_vwc)
regression <- regression %>%
mutate(backtrans_estimate = estimate*sd_log_anpp+mean_log_anpp,
backtrans_vwc = newx*sd_vwc+mean_vwc)
regression_limited <- {}
for(dotrt in unique(regression$Treatment)){
tmpdat <- filter(regression, Treatment == dotrt)
tmprange <- range(anpp_data[which(anpp_data$Treatment==dotrt),"total_seasonal_vwc"])
tmpdat$backtrans_vwc[tmpdat$backtrans_vwc < tmprange[1] | tmpdat$backtrans_vwc > tmprange[2]] <- NA
regression_limited <- rbind(regression_limited, tmpdat)
}
ggplot(anpp_data, aes(x=total_seasonal_vwc,y=log(anpp)))+
geom_point(shape=21,color="grey25",alpha=0.8,aes(fill=Treatment))+
geom_line(data=regression_limited, aes(x=backtrans_vwc, y=backtrans_estimate, color=Treatment), size=1)+
scale_fill_brewer(palette = "Set2")+
scale_color_brewer(palette = "Set2")+
xlab("March-June Cumulative VWC")+
ylab(expression(paste("log[ANPP (g ",m^2,")]")))+
theme_bw()+
theme(panel.grid.minor = element_blank())
source('~/Repos/usses_water/code/04_plot_model_results.R', echo=TRUE)
setwd("~/Repos/usses_water/manuscript")
library(xtable)
library(tidyverse)
library(dplyr)
tab_dat <- read.csv("../data/estimated_biomass/ndvi_biomass_regression_parameters.csv", row.names = 1) %>%
filter(year > 2011 & year < 2017)
head(tab_dat)
devtools::install_github('rstudio/rmarkdown')
install.packages("tinytex")
install.packages("knitr")
install.packages("knitr")
Sys.getenv("RSTUDIO_PANDOC")
library(tidyverse)    # Data munging
library(dplyr)        # Data summarizing
library(ggthemes)     # Pleasing ggplot themes
library(ggjoy)        # Joy plots!
library(stringr)      # Working with strings
library(rstan)        # For MCMC and Stan objects
library(gridExtra)    # For combining ggplot objects
library(viridis)      # Pleasing color palette
library(RColorBrewer) # More color palettes
library(cowplot)      # For combining ggplots
all_fit <- readRDS("../results/randcoefs_alltreatments_NDVIfit.RDS")
####
####  FUNCTION TO CALCULATE MAX(Pr(effect) > 0, Pr(effect) < 0) ----
####
get_one_tailed <- function(values){
above <- 1 - ecdf(values)(0)
below <- ecdf(values)(0)
max(above,below)
}
####
####  PLOT TREATMENT-LEVEL POSTERIOR DISTRIBUTIONS ----
####
mycols <- c("#009E73", "#D55E00", "#0072B2")
param_labels <- c("Control::Intercept",
"Drought::Intercept",
"Irrigation::Intercept",
"Control::Slope",
"Drought::Slope",
"Irrigation::Slope")
betas <- data.frame(extract(all_fit, pars = 'beta')) %>%
mutate(iteration = row_number()) %>%
gather(param_name, estimate, starts_with('beta')) %>%
mutate(param_name = factor(param_name, labels = param_labels)) %>%
separate(param_name, c("Treatment", "Type"), "::")
treat_slopes <- betas %>%
filter(Treatment != "Control") %>%
mutate(Type = paste(Type,"Offset"))
slope_probs <- treat_slopes %>%
group_by(Treatment, Type) %>%
summarise(probs = round(get_one_tailed(estimate),2)) %>%
mutate(prob_text = paste("Pr < 0 =", probs))
slope_probs$prob_text[1] <- paste("Pr > 0 =", slope_probs$probs[1]) # switch direction of drought intercpet since greater than 0
slope_probs$xpos <- c(-2.8, -0.6, -2.6, -0.6)
slope_probs$ypos <- c(1.3,1.3,2.55,2.7)
treat_cols <- mycols[2:3]
ggplot(treat_slopes)+
geom_vline(aes(xintercept=0), linetype=2, color="grey45")+
geom_joy(stat="density", adjust=3, alpha=0.8, aes(x=estimate, y=Treatment, fill=Treatment, color=Treatment, height = ..density..))+
geom_text(data = slope_probs, aes(x=xpos, y=ypos, label = prob_text), size = 3)+
facet_wrap(~Type, scales = "free")+
scale_y_discrete(labels = c("Drought","Irrigation"))+
scale_fill_manual(values = treat_cols)+
scale_color_manual(values = treat_cols)+
guides(fill=FALSE, color=FALSE)+
xlab("Coefficient Value")+
ylab(NULL)+
theme_bw()+
theme(panel.grid.minor = element_blank(),
panel.border     = element_blank(),
axis.line        = element_blank(),
axis.ticks       = element_blank(),
strip.background = element_blank(),
strip.text       = element_text(face="bold"),
panel.spacing    = unit(1, units = "cm"))
library(xtable)
treat_effects <- data.frame(extract(all_fit, pars = 'beta')) %>%
mutate(iteration = row_number()) %>%
gather(param_name, estimate, starts_with('beta')) %>%
mutate(param_name = factor(param_name, labels = param_labels)) %>%
spread(param_name, estimate) %>%
mutate(`Drought::Intercept` = `Drought::Intercept` + `Control::Intercept`,
`Irrigation::Intercept` = `Irrigation::Intercept` + `Control::Intercept`,
`Drought::Slope` = `Drought::Slope` + `Control::Slope`,
`Irrigation::Slope` = `Irrigation::Slope` + `Control::Slope`) %>%
gather(param_name, estimate, -iteration)
effect_summary <- treat_effects %>%
group_by(param_name) %>%
summarise(mean_estimate = round(mean(estimate), 2),
median_estimate = round(median(estimate), 2),
lower_95_ci = round(quantile(estimate, probs = c(0.025)), 2),
upper_95_ci = round(quantile(estimate, probs = c(0.975)), 2)) %>%
separate(param_name, into = c("Treatment", "Coefficient"), sep = "::") %>%
arrange(Coefficient, Treatment) %>%
select(Coefficient, everything())
colnames(effect_summary) <- c("Coefficient", "Treatment", "Posterior Mean", "Posterior Median",
"Lower 95\\% BCI", "Upper 95\\% BCI")
coef_caption <- "Summary statistics from the posterior distributions of coefficients for each treatment ($\\beta$ coefficients in equation 1). The `Intercept' and `Slope' summaries reported here for drought and irrigation are from the posterior distributions of the intercept and slope for the control treatment plus the offsets for each treatment. Posterior distributions of the offsets are in Figure A5-1."
print(xtable(effect_summary, caption = coef_caption, digits = 2),
caption.placement="top",
include.rownames = F,
sanitize.colnames.function = identity,
comment = FALSE,
size = "normalsize")
ggplot(treat_slopes)+
geom_vline(aes(xintercept=0), linetype=2, color="grey45")+
geom_joy(stat="density", adjust=3, alpha=0.8, aes(x=estimate, y=Treatment, fill=Treatment, color=Treatment, height = ..density..))+
geom_text(data = slope_probs, aes(x=xpos, y=ypos, label = prob_text), size = 3)+
facet_wrap(~Type, scales = "free")+
scale_y_discrete(labels = c("Drought","Irrigation"))+
scale_fill_manual(values = treat_cols)+
scale_color_manual(values = treat_cols)+
guides(fill=FALSE, color=FALSE)+
xlab("Coefficient Value")+
ylab(NULL)+
theme_bw()+
theme(panel.grid.minor = element_blank(),
panel.border     = element_blank(),
axis.line        = element_blank(),
axis.ticks       = element_blank(),
strip.background = element_blank(),
strip.text       = element_text(face="bold"),
panel.spacing    = unit(1, units = "cm"))
slope_probs
slope_probs
slope_probs <- treat_slopes %>%
group_by(Treatment, Type) %>%
summarise(probs = round(get_one_tailed(estimate),2)) %>%
mutate(prob_text = paste("Pr < 0 =", probs))
slope_probs$prob_text[1] <- paste("Pr > 0 =", slope_probs$probs[1]) # switch direction of drought intercpet since greater than 0
slope_probs$xpos <- c(-2.8, -0.3, -2.6, -0.3)
slope_probs$ypos <- c(1.3,1.3,2.55,2.7)
treat_cols <- mycols[2:3]
ggplot(treat_slopes)+
geom_vline(aes(xintercept=0), linetype=2, color="grey45")+
geom_joy(stat="density", adjust=3, alpha=0.8, aes(x=estimate, y=Treatment, fill=Treatment, color=Treatment, height = ..density..))+
geom_text(data = slope_probs, aes(x=xpos, y=ypos, label = prob_text), size = 3)+
facet_wrap(~Type, scales = "free")+
scale_y_discrete(labels = c("Drought","Irrigation"))+
scale_fill_manual(values = treat_cols)+
scale_color_manual(values = treat_cols)+
guides(fill=FALSE, color=FALSE)+
xlab("Coefficient Value")+
ylab(NULL)+
theme_bw()+
theme(panel.grid.minor = element_blank(),
panel.border     = element_blank(),
axis.line        = element_blank(),
axis.ticks       = element_blank(),
strip.background = element_blank(),
strip.text       = element_text(face="bold"),
panel.spacing    = unit(1, units = "cm"))
